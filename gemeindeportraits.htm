<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>Gemeindeportraits</title>

    <meta charset="UTF-8">

    <link href="gemeindeportraits/bootstrap.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="css/statistik.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
</head>
<body>

<div class="container">

    <h2>Gemeindeportraits</h2>

    <div id="karte" class="dc-chart">
        <strong>Gemeinden</strong> (bitte wählen)
        <a class="reset" href="javascript:karte.filterAll();dc.redrawAll();" style="display: none;">zurücksetzen</a>
        <span class="reset" style="display: none;"> | Aktuell ausgewählt: <span class="filter"></span></span>

        <div class="clearfix"></div>
    </div>

    <div class="clearfix"></div>
	
	<h3>Kennzahlen</h3>
	
	<div id="kennzahlen-chart" class="dc-chart">
	<table>
		<col width="60%">
		<col width="40%">
		<tr>
			<td>Ständige Wohnbevölkerung <span class="bevölkerungyear"></span></td>
			<td align="right"><span id="bevölkerung"></span></td>
		</tr>
		<tr>
			<td>Anteil Ausländer/innen in % <span class="bevölkerungyear"></span></td>
			<td align="right"><span id="ausländeranteil"></span></td>
		</tr>
		<tr>
			<td>Haushalte <span class="haushalteyear"></span></td>
			<td align="right"><span id="haushalte"></span></td>
		</tr>
		<tr>
			<td>Anteil Einpersonenhaushalte in % <span class="haushalteyear"></span></td>
			<td align="right"><span id="anteileinpersonenhaushalte"></span></td>
		</tr>
		<tr>
			<td>Wohnungen <span class="wohnungenyear"></span></td>
			<td align="right"><span id="wohnungen"></span></td>
		</tr>
		<tr>
			<td>Neuerstellte Wohnungen <span class="wohnungenyear"></span></td>
			<td align="right"><span id="neuwohnungen"></span></td>
		</tr>
		<tr>
			<td>Volksschüler/innen <span class="volksschüleryear"></span></td>
			<td align="right"><span id="volksschüler"></span></td>
		</tr>
		<tr>
			<td>Betriebe <span class="wirtschaftyear"></span></td>
			<td align="right"><span id="betriebe"></span></td>
		</tr>
		<tr>
			<td>Beschäftigte <span class="wirtschaftyear"></span></td>
			<td align="right"><span id="beschäftigte"></span></td>
		</tr>
		<tr>
			<td>Steuerfuss Einwohnergemeinde</td>
			<td align="right"><span id="steuerfuss"></span></td>
		</tr>
	</table>
	</div>
	
	<h3>Bevölkerungsentwicklung</h3>
	
	<div id="entwicklung-chart" class="dc-chart">
	        <div class="clearfix"></div>
	</div>
	<h3>Altersstruktur <span class="altersstrukturyear"></span></h3>
	
	<div id="altersstruktur-chart" class="dc-chart">
	        <div class="clearfix"></div>
	</div>
	
	<h3>Wirtschaftsstruktur <span class="wirtschaftsstrukturyear"></span></h3>
	
	<div id="wirtschaftsstruktur-chart" class="dc-chart">
	        <div class="clearfix"></div>
	</div>

    <div>
        <a href="javascript:dc.filterAll();%20dc.renderAll();">Reset All</a>
    </div>

</div>

<script type="text/javascript" src="js/libraries/queue.js"></script>
<script type="text/javascript" src="js/libraries/d3.js"></script>
<script type="text/javascript" src="js/libraries/crossfilter.js"></script>
<script type="text/javascript" src="js/libraries/dc.js"></script>
<script type="text/javascript">
    var numberFormat = d3.format(".2f");

    var karte = dc.geoChoroplethChart("#karte");
	var bevölkerung = dc.numberDisplay("#bevölkerung");
	var ausländeranteil = dc.numberDisplay("#ausländeranteil");
	var haushalte = dc.numberDisplay("#haushalte");
	var anteileinpersonenhaushalte = dc.numberDisplay("#anteileinpersonenhaushalte");
	var bestandwohnungen = dc.numberDisplay("#wohnungen");
	var neuwohnungen = dc.numberDisplay("#neuwohnungen");
	var volksschüler = dc.numberDisplay("#volksschüler");
	var betriebe = dc.numberDisplay("#betriebe");
	var beschäftigte = dc.numberDisplay("#beschäftigte");
	/*var steuerfuss = dc.numberDisplay("#steuerfuss");*/
	
	var entwicklungsChart = dc.compositeChart("#entwicklung-chart");
	//var entwicklungsChart = dc.barChart("#entwicklung-chart");
	//var entwicklungsChart = dc.bubbleChart("#entwicklung-chart");
	
	var altersstrukturChart = dc.barChart("#altersstruktur-chart");
	
	var wirtschaftsstrukturChart = dc.pieChart("#wirtschaftsstruktur-chart");
	
	var q = queue()
		.defer(d3.csv, "data/data1.csv")
		.defer(d3.csv, "data/data2.csv")
		.defer(d3.csv, "data/data3.csv")
		.defer(d3.csv, "data/data4.csv")
		.defer(d3.csv, "data/data5.csv")
		.defer(d3.csv, "data/data7.csv")
		.defer(d3.csv, "data/data8.csv")
		.defer(d3.csv, "data/data9.csv");
		
	q.await(function(error, data1, data2, data3, data4, data5, data7, data8, data9) {
	
	meta2 = data2.filter(function(el) {
		return el["Meta"] == 1
	});
	
	year2 = meta2.filter(function( el ) { return el.Type == "year";});
	if (year2.length == 1) {
		$(".haushalteyear").html("("+year2[0].Content+")");
	}

	meta3 = data3.filter(function(el) {
		return el["Meta"] == 1
	});
	
	year3 = meta3.filter(function( el ) { return el.Type == "year";});
	if (year3.length == 1) {
		$(".wohnungenyear").html("("+year3[0].Content+")");
	}
	
	meta4 = data4.filter(function(el) {
		return el["Meta"] == 1
	});
	
	year4 = meta4.filter(function( el ) { return el.Type == "year";});
	if (year4.length == 1) {
		$(".volksschüleryear").html("("+year4[0].Content+")");
	}
	
	meta5 = data5.filter(function(el) {
		return el["Meta"] == 1
	});
	
	year5 = meta5.filter(function( el ) { return el.Type == "year";});
	if (year5.length == 1) {
		$(".wirtschaftyear").html("("+year5[0].Content+")");
	}
	
	meta8 = data8.filter(function(el) {
		return el["Meta"] == 1
	});
	
	year8 = meta8.filter(function( el ) { return el.Type == "year";});
	if (year8.length == 1) {
		$(".altersstrukturyear").html("("+year8[0].Content+")");
	}
	
	meta9 = data9.filter(function(el) {
		return el["Meta"] == 1
	});
	
	year9 = meta9.filter(function( el ) { return el.Type == "year";});
	if (year9.length == 1) {
		$(".wirtschaftsstrukturyear").html("("+year9[0].Content+")");
	}
	
	//console.log(data8);
	
	var data = crossfilter();
	
	data.add(data1.map(function(d) {
        return {State: d["State"], Raised:d["Raised"] , "Ständige Wohnbevölkerung": d["Ständige Wohnbevölkerung"], "Ausländer/innen": d["Ausländer/innen"], "Haushalte":0, "Einpersonenhaushalte":0, "Wohnungen":0, "Neuerstellte Wohnungen":0, "Volksschüler":0, "Betriebe": 0, "Beschäftigte": 0, "Jahr":0, "Bevölkerung":0, "Ausländer":0, "Alterskategorie":"NaN", "GeschlechtNation":"NaN", "AnzahlPersonen":0, "Sektor":"NaN", "BetriebenachSektor":0, "BeschäftigtenachSektor":0};
	}));
	data.add(data2.map(function(d) {
        return {State: d["State"], Raise:0, "Ständige Wohnbevölkerung":0, "Ausländer/innen":0,  "Haushalte": d["Haushalte"], "Einpersonenhaushalte": d["Einpersonenhaushalte"], "Wohnungen":0, "Neuerstellte Wohnungen":0, "Volksschüler":0, "Betriebe": 0, "Beschäftigte": 0, "Jahr":0, "Bevölkerung":0, "Ausländer":0, "Alterskategorie":"NaN", "GeschlechtNation":"NaN", "AnzahlPersonen":0, "Sektor":"NaN", "BetriebenachSektor":0, "BeschäftigtenachSektor":0};
    }));
	data.add(data3.map(function(d) {
        return {State: d["State"], Raise:0, "Ständige Wohnbevölkerung":0, "Ausländer/innen":0,  "Haushalte":0, "Einpersonenhaushalte":0 , "Wohnungen": d["Wohnungen"], "Neuerstellte Wohnungen": d["Neuerstellte Wohnungen"], "Volksschüler":0, "Betriebe": 0, "Beschäftigte": 0, "Jahr":0, "Bevölkerung":0, "Ausländer":0, "Alterskategorie":"NaN", "GeschlechtNation":"NaN", "AnzahlPersonen":0, "Sektor":"NaN", "BetriebenachSektor":0, "BeschäftigtenachSektor":0};
    }));
	data.add(data4.map(function(d) {
        return {State: d["State"], Raise:0, "Ständige Wohnbevölkerung":0, "Ausländer/innen":0,  "Haushalte":0, "Einpersonenhaushalte":0 , "Wohnungen":0, "Neuerstellte Wohnungen":0, "Volksschüler": d["Volksschüler"], "Betriebe": 0, "Beschäftigte": 0, "Jahr":0, "Bevölkerung":0, "Ausländer":0, "Alterskategorie":"NaN", "GeschlechtNation":"NaN", "AnzahlPersonen":0, "Sektor":"NaN", "BetriebenachSektor":0, "BeschäftigtenachSektor":0};
    }));
	data.add(data5.map(function(d) {
        return {State: d["State"], Raise:0, "Ständige Wohnbevölkerung":0, "Ausländer/innen":0,  "Haushalte":0, "Einpersonenhaushalte":0 , "Wohnungen":0, "Neuerstellte Wohnungen":0, "Volksschüler":0 , "Betriebe": d["Betriebe"], "Beschäftigte": d["Beschäftigte"], "Jahr":0, "Bevölkerung":0, "Ausländer":0, "Alterskategorie":"NaN", "GeschlechtNation":"NaN", "AnzahlPersonen":0, "Sektor":"NaN", "BetriebenachSektor":0, "BeschäftigtenachSektor":0};
    }));
	
	data.add(data7.map(function(d) {
        return {State: d["State"], Raise:0, "Ständige Wohnbevölkerung":0, "Ausländer/innen":0,  "Haushalte":0, "Einpersonenhaushalte":0 , "Wohnungen":0, "Neuerstellte Wohnungen":0, "Volksschüler":0 , "Betriebe":0, "Beschäftigte":0, "Jahr":d["Jahr"], "Bevölkerung":d["Bevölkerung"], "Ausländer":d["Ausländer"], "Alterskategorie":"NaN", "GeschlechtNation":"NaN", "AnzahlPersonen":0, "Sektor":"NaN", "BetriebenachSektor":0, "BeschäftigtenachSektor":0};
    }));
	data.add(data8.map(function(d) {
        return {State: d["State"], Raise:0, "Ständige Wohnbevölkerung":0, "Ausländer/innen":0,  "Haushalte":0, "Einpersonenhaushalte":0 , "Wohnungen":0, "Neuerstellte Wohnungen":0, "Volksschüler":0 , "Betriebe":0, "Beschäftigte":0, "Jahr":0, "Bevölkerung":0, "Ausländer":0, "Alterskategorie":d["Alterskategorie"], "GeschlechtNation":d["Typ"], "AnzahlPersonen":d["Anzahl"], "Sektor":"NaN", "BetriebenachSektor":0, "BeschäftigtenachSektor":0};
    }));
	data.add(data9.map(function(d) {
        return {State: d["State"], Raise:0, "Ständige Wohnbevölkerung":0, "Ausländer/innen":0,  "Haushalte":0, "Einpersonenhaushalte":0 , "Wohnungen":0, "Neuerstellte Wohnungen":0, "Volksschüler":0 , "Betriebe":0, "Beschäftigte":0, "Jahr":0, "Bevölkerung":0, "Ausländer":0, "Alterskategorie":"NaN", "GeschlechtNation":"NaN", "AnzahlPersonen":0, "Sektor":d["Sektor"], "BetriebenachSektor":d["Betriebe"], "BeschäftigtenachSektor":d["Beschäftigte"]};
    }));

		var states = data.dimension(function (d) {
            return d["State"];
        });
		var jahr = data.dimension(function (d) {
            return +d["Jahr"];
        });
        var stateRaisedSum = states.group().reduceSum(function (d) {
            return d["Raised"];
        });
        var einwohner = states.group().reduceSum(function (d) {
            return +d["Ständige Wohnbevölkerung"];
        });
		var einwohnerprojahr = jahr.group().reduceSum(function (d) {
            return +d["Bevölkerung"];
        });
		var auländeranteilprojahr = jahr.group().reduceSum(function (d) {
            return d["Ausländer"]/d["Bevölkerung"];
        });
		
		var einwohnerTotal = data.groupAll().reduce(
          function (p, v) {
              ++p.n;
              p.tot += +v["Ständige Wohnbevölkerung"];
              return p;
          },
          function (p, v) {
              --p.n;
              p.tot -= +v["Ständige Wohnbevölkerung"];
              return p;
          },
          function () { return {n:0,tot:0}; }
		);
		
		var ausländer = states.group().reduceSum(function (d) {
            return d["Ausländer/innen"];
        });
		
		var ausländerTotal = data.groupAll().reduce(
          function (p, v) {
              ++p.n;
              p.tot += +v["Ausländer/innen"];
			  p.pop += +v["Ständige Wohnbevölkerung"];
			  p.ant = p.tot/p.pop;
              return p;
          },
          function (p, v) {
              --p.n;
              p.tot -= +v["Ausländer/innen"];
			  p.pop -= +v["Ständige Wohnbevölkerung"];
			  p.ant = p.tot/p.pop;
              return p;
          },
          function () { return {n:0,tot:0,pop:0,ant:0}; }
		);
		
		/*var haushalte = states.group().reduceSum(function (d) {
            return +d["Haushalte"];
        });*/
		
		var haushalteTotal = data.groupAll().reduce(
          function (p, v) {
              ++p.n;
              p.tot += +v["Haushalte"];
              return p;
          },
          function (p, v) {
              --p.n;
              p.tot -= +v["Haushalte"];
              return p;
          },
          function () { return {n:0,tot:0}; }
		);
		
		var einpersonenhaushalteTotal = data.groupAll().reduce(
          function (p, v) {
              ++p.n;
              p.tot += +v["Haushalte"];
			  p.pop += +v["Einpersonenhaushalte"];
			  p.ant = p.tot/p.pop;
              return p;
          },
          function (p, v) {
              --p.n;
              p.tot -= +v["Haushalte"];
			  p.pop -= +v["Einpersonenhaushalte"];
			  p.ant = p.tot/p.pop;
              return p;
          },
          function () { return {n:0,tot:0,pop:0,ant:0}; }
		);
		
		var wohnungen = states.group().reduceSum(function (d) {
            return +d["Wohnungen"];
        });
		
		var wohnungenTotal = data.groupAll().reduce(
          function (p, v) {
              ++p.n;
              p.tot += +v["Wohnungen"];
              return p;
          },
          function (p, v) {
              --p.n;
              p.tot -= +v["Wohnungen"];
              return p;
          },
          function () { return {n:0,tot:0}; }
		);
		
		var neuewohnungen = states.group().reduceSum(function (d) {
            return +d["Neuerstellte Wohnungen"];
        });
		
		var neuewohnungenTotal = data.groupAll().reduce(
          function (p, v) {
              ++p.n;
              p.tot += +v["Neuerstellte Wohnungen"];
              return p;
          },
          function (p, v) {
              --p.n;
              p.tot -= +v["Neuerstellte Wohnungen"];
              return p;
          },
          function () { return {n:0,tot:0}; }
		);
		
		var volksschülerInnen = states.group().reduceSum(function (d) {
            return +d["Volksschüler"];
        });
		
		var volksschülerTotal = data.groupAll().reduce(
          function (p, v) {
              ++p.n;
              p.tot += +v["Volksschüler"];
              return p;
          },
          function (p, v) {
              --p.n;
              p.tot -= +v["Volksschüler"];
              return p;
          },
          function () { return {n:0,tot:0}; }
		);
		
		var betriebegroup = states.group().reduceSum(function (d) {
            return +d["Betriebe"];
        });
		
		var betriebeTotal = data.groupAll().reduce(
          function (p, v) {
              ++p.n;
              p.tot += +v["Betriebe"];
              return p;
          },
          function (p, v) {
              --p.n;
              p.tot -= +v["Betriebe"];
              return p;
          },
          function () { return {n:0,tot:0}; }
		);
		
		var beschäftigtegroup = states.group().reduceSum(function (d) {
			return +d["Beschäftigte"];
        });
		
		var beschäftigteTotal = data.groupAll().reduce(
          function (p, v) {
              ++p.n;
              p.tot += +v["Beschäftigte"];
              return p;
          },
          function (p, v) {
              --p.n;
              p.tot -= +v["Beschäftigte"];
              return p;
          },
          function () { return {n:0,tot:0}; }
		);
		
		var altersstrukturStack=data.dimension(function (d) {
			return d["Alterskategorie"];
		});
				
		var altersstrukturGroup= altersstrukturStack.group().reduce(function(p, v) {
			++p.count;
			if (v["GeschlechtNation"]=="Schweizerinnen" | v["GeschlechtNation"]=="Ausländerinnen") {
				p["Negativ"] = (p["Negativ"] || 0) + +v["AnzahlPersonen"];
				p[v["GeschlechtNation"]] = (p[v["GeschlechtNation"]] || 0) - +v["AnzahlPersonen"];
			}
			else {
				p[v["GeschlechtNation"]] = (p[v["GeschlechtNation"]] || 0) + +v["AnzahlPersonen"];
			}
			p.total += + +v["AnzahlPersonen"];
			//console.log(v);
			//console.log(p);
			return p;
		}, function(p, v) {
			--p.count;
			if (v["GeschlechtNation"]=="Schweizerinnen" | v["GeschlechtNation"]=="Ausländerinnen") {
				p["Negativ"] = (p["Negativ"] || 0) - +v["AnzahlPersonen"];
				p[v["GeschlechtNation"]] = (p[v["GeschlechtNation"]] || 0) + +v["AnzahlPersonen"];
			}
			else {
				p[v["GeschlechtNation"]] = (p[v["GeschlechtNation"]] || 0) - +v["AnzahlPersonen"];
			}
			p.total -= - +v["AnzahlPersonen"];
			return p;
		}, function() {
			return { total:0, count:0};
		});
		var altersstrukturGroup3 = altersstrukturStack.group().reduceSum(function (d) {
			return +d["AnzahlPersonen"];
		});
		
		var altersstrukturkategorien = data.dimension(function (d) {
			return d["GeschlechtNation"];
		});
		var altersstrukturGroup2 = altersstrukturkategorien.group().reduceSum(function (d) {
			return +d["AnzahlPersonen"];
		});
		
		var SektorDimension = data.dimension(function (d) {
			return d["Sektor"];
		});
		var BetriebenachSektorGroup = SektorDimension.group().reduceSum(function (d) {
			return d["BetriebenachSektor"];
		});
		var BeschäftigtenachSektorGroup = SektorDimension.group().reduceSum(function (d) {
			return d["BeschäftigtenachSektor"];
		});
		
		function sel_stack(i) {
			return function(d) {
				return d.value[i];
			};
		};
		
		var average = function(d) {
			return d.n ? d.tot / d.n : 0;
		};
		
		var total = function(d) {
			return d.tot;
		};
		
		var anteil = function(d) {
			return d.ant;
		};
		
		var rowCount = function(d) {
			return d.n;
		};

		//Karte
		
		var totalWidth = document.getElementById('karte').offsetWidth;
		var height = 350
		var scale = 81500
		var lat = 8.548589899
		var lon = 47.16479567
		
		var projection = d3.geo.mercator()
			.center([lat,lon])
			.scale(scale);
			//.translate([totalWidth/2,height/2]);

        d3.json("data/gemeinden.json", function (statesJson) {
            karte.width(990)
                    .height(500)
                    .dimension(states)
                    .group(einwohner)
                    .colors(d3.scale.quantize().range(["#E2F2FF", "#C4E4FF", "#9ED2FF", "#81C5FF", "#6BBAFF", "#51AEFF", "#36A2FF", "#1E96FF", "#0089FF", "#0061B5"]))
                    .colorDomain([0, 200])
                    .colorCalculator(function (d) { return d ? karte.colors()(d) : '#ccc'; })
					.projection(projection)
                    .overlayGeoJson(statesJson.features, "state", function (d) {
                        return d.properties.name;
                    })
                .valueAccessor(function(kv) {
                    //console.log(kv);
                    return kv.value;
                })
                    .title(function (d) {
                        return "State: " + d.key + "\nTotal Amount Raised: " + numberFormat(d.value ? d.value : 0) + "M";
                    });
					
			bevölkerung
				.valueAccessor(total).formatNumber(d3.format(".0f"))
				/*.html({
					one:"<span style=\"color:steelblue; font-size: 26px;\">%number</span> Monkey",
					some:"<span style=\"color:steelblue; font-size: 26px;\">%number</span> Total Monkeys",
					none:"<span style=\"color:steelblue; font-size: 26px;\">No</span> Monkeys"
				})*/
				.group(einwohnerTotal);
				
			ausländeranteil
				.valueAccessor(anteil).formatNumber(d3.format(".2f"))
				.group(ausländerTotal);
				
			haushalte
				.valueAccessor(total).formatNumber(d3.format(".0f"))
				.group(haushalteTotal);
				
			anteileinpersonenhaushalte
				.valueAccessor(anteil).formatNumber(d3.format(".2f"))
				.group(einpersonenhaushalteTotal);
				
			bestandwohnungen
				.valueAccessor(total).formatNumber(d3.format(".0f"))
				.group(wohnungenTotal);
			
			neuwohnungen
				.valueAccessor(total).formatNumber(d3.format(".0f"))
				.group(neuewohnungenTotal);
				
			volksschüler
				.valueAccessor(total).formatNumber(d3.format(".0f"))
				.group(volksschülerTotal);
				
			betriebe
				.valueAccessor(total).formatNumber(d3.format(".0f"))
				.group(betriebeTotal);

			beschäftigte
				.valueAccessor(total).formatNumber(d3.format(".0f"))
				.group(beschäftigteTotal);
	
			/*entwicklungsChart
				.width(768)
				.height(480)
				.transitionDuration(1500)
				.x(d3.scale.ordinal())
				.xUnits(dc.units.ordinal)
				.brushOn(false)
                .dimension(jahr)
                .group(einwohnerprojahr)
				.margins({left: 100, top: 10, right: 10, bottom: 20})
				.elasticY(true)
				.brushOn(false)
				.renderHorizontalGridLines(true);
				//.ordering(function(d) { return characteristics.indexOf(d.key); });*/
					
			entwicklungsChart
				.width(500)
				.height(500)
				.transitionDuration(1500)
				.margins({left: 80, top: 10, right: 40, bottom: 40})
				.dimension(jahr)
				.group(einwohnerprojahr)
				.x(d3.scale.linear().domain([2010,2017]))
				//.x(d3.scale.ordinal().domain([2011, 2012, 2013, 2014, 2015, 2016]))
				//.xUnits(dc.units.ordinal)
				.elasticY(true)
				.brushOn(false)
				._rangeBandPadding(1)
				.yAxisLabel("The Y Axis")
				.compose([
					dc.barChart(entwicklungsChart)
						.group(einwohnerprojahr, "Bevölkerung")
						.ordinalColors(["#007ac4"])
						.yAxisPadding("10%")
						.gap(40)
						.centerBar(true),
						
						/*.title(function(d) {
							return ""; 
						}),*/
					dc.lineChart(entwicklungsChart)
						.group(auländeranteilprojahr, "Anteil Ausländer/innen in %")
						.yAxisPadding("10%")
						.ordinalColors(["#ff403a"])
						.useRightYAxis(true)
						.interpolate("linear")
						/*.title(function(d) {
							return ""; 
						})*/
				])
				//.yAxisLabel(characteristicsStack[0])
				//.rightYAxisLabel(characteristicsStack[1])
				.renderHorizontalGridLines(true)
				.legend(dc.legend().x(100).y(20).itemHeight(13).gap(10)
				.horizontal(true)
				.legendWidth(400)
				.autoItemWidth(true))
			
			var characteristics=["Schweizerinnen", "Ausländerinnen", "Negativ", "Schweizer", "Ausländer"]
			var characteristicsStack=["0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74", "75-79", "80-84", "85-89", "90-94", "95-99", "100+"]
			
			altersstrukturChart
				.width(500)
				.height(500)
				.x(d3.scale.ordinal())
				.xUnits(dc.units.ordinal)
				.margins({left: 80, top: 10, right: 10, bottom: 40})
				.brushOn(false)
				.barPadding(0.2)
				.outerPadding(0.2)
				.centerBar(false)
				//.clipPadding(1)
				.controlsUseVisibility(true)
				.title(function(d) {
					return ""; //d.key + '[' + this.layer + ']: ' + d.value[this.layer] + " " + d.value["total"];
				})
				.dimension(altersstrukturStack)
				.group(altersstrukturGroup, characteristics[0] + "", sel_stack(characteristics[0]))
				//.renderLabel(true)
				//.ordinalColors(colorscheme[scale][characteristicsLength])
				.transitionDuration(1500)
				.yAxisPadding("5%")
				.elasticY(true)
				;

			if (typeof relative !== 'undefined' && relative==true) {
				altersstrukturChart.yAxis().tickFormat(d3.format('.0%'));
				altersstrukturChart.renderLabel(false)
				altersstrukturChart.yAxisPadding("0%");
			}
			else {
				//altersstrukturChart.yAxis().tickFormat(germanFormatters.numberFormat(","));	
			}

			if (typeof characteristicsStack !== []) {
			altersstrukturChart.x(d3.scale.ordinal().domain(characteristicsStack));
			}

			//Farben in der Legende manuell zuweisen. funktionier nicht mit der Legende.
			/*Charts[number].on('renderlet', function(chart){
				for (var i=1; i<=characteristicsLength; ++i) {
				var j=i-1;
				chart.selectAll("g.stack._"+j+" > rect").attr("fill", function(d){
					return colorscheme[scale][characteristicsLength][i-1];
					
				});
				chart.selectAll("g.dc-legend-item:nth-child("+i+") > rect").attr("fill", function(d){
					return colorscheme[scale][characteristicsLength][i-1];
					
				});}
				})*/

			altersstrukturChart.filter = function() {};

			altersstrukturChart.legend(dc.legend().x(10).y(10).itemHeight(13).gap(10)
						.horizontal(false)
						//.legendWidth(500-10)
						.autoItemWidth(true));

			//Legende Anders ordnen
			dc.override(altersstrukturChart, 'legendables', function() {
				var items = altersstrukturChart._legendables();
				return items.reverse();
			});

			for(var i = 1; i < 5; ++i){
				altersstrukturChart.stack(altersstrukturGroup, characteristics[i], sel_stack(characteristics[i]));
			}
			
			altersstrukturChart.on('pretransition', function(c) {
				c.svg().select('g').attr("transform","rotate(270 250,250)");
				c.svg().selectAll('g.axis:nth-child(2) > g > text').attr("transform","translate(12,25) rotate(90 0,0)");
				//c.svg().selectAll('g.axis:nth-child(3) > g > text').attr("transform","translate(-12,15) rotate(90 0,0)");
				//c.svg().selectAll('g.axis:nth-child(2) > g > text').attr("transform","");
				//g.axis:nth-child(2) > g:nth-child(1) > text:nth-child(2)
			});
			
			wirtschaftsstrukturChart.width(500)
				.cx(250)
				.cy(250)
				.height(500)
				.slicesCap(15)
				.dimension(SektorDimension)
				.group(BetriebenachSektorGroup)
				.controlsUseVisibility(true)
				.externalRadiusPadding(10)
				.emptyTitle("Keine Daten vorhanden")
				.innerRadius(40)
				//.colors(colorScale)
				.transitionDuration(1500)
				.title(function(d) {
					return ""; 
				})
				//.ordering(function(d) { return characteristics.indexOf(d.key); })
				;
			
            dc.renderAll();
			
			$("g.stack:nth-child(3)").hide();
			$("g.dc-legend-item:nth-child(3)").hide();
        });
    });
</script>

</body></html>